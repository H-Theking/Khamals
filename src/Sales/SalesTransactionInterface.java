/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Sales;


import Database.DatabaseHelper;
import User.Users;
import java.awt.print.PrinterException;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;
/**
 *
 * @author sebs
 */
public class SalesTransactionInterface extends javax.swing.JPanel {

       private DatabaseHelper transacetionGeneralDta;
       String pruductCode= "";
       static JComboBox prime;
    /**
     * Creates new form SalesTransactionInterface
     */
    public SalesTransactionInterface() {
        
        //Create a combo box that will be used as the cell editor for selecting product names in 
        //the sales tables
        prime = new JComboBox();
        
        //Populate the combo box with product names
        ProductsForSales.populateComboxWithProductNames(prime);
        initComponents();
        
        
           try {
               //Automatically fiil the transaction id, and cahsier's name
               
               //Connect to the database

               transacetionGeneralDta = new DatabaseHelper();
           } catch (SQLException ex) {
               Logger.getLogger(SalesTransactionInterface.class.getName()).log(Level.SEVERE, null, ex);
           }
        try{
       
        transacetionGeneralDta.setQuery("Select MAX(TRANSACTION_ID) from SALES_GENERAL");
                
        //Set the current TRANSACTION_ID, which is the last TRANSACTION_ID + 1
        Integer id = transacetionGeneralDta.resultSet.getInt(1) + 1; 
        transaction_idFied.setText(id.toString()); 
           
                           
        //Get and set cashier name
        cashier_nameField.setText(Users.getName());
            System.out.println("Hey:"+Users.getName());
        }catch(SQLException e){
            e.printStackTrace();
        }
    }
    
    public static String getFilledData(){
     //This method is expected to read all the data in the sales view and format it into a string to
     //be used by an sql statement.
        return "";
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        printReceiptButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        grandTotalField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        discountFiel = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        amountToBePaidField = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        transaction_idFied = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        customer_nameField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        cashier_nameField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        dateChooserCombo1 = new datechooser.beans.DateChooserCombo();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        jLabel3.setText("jLabel3");

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                formComponentHidden(evt);
            }
        });
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                formFocusLost(evt);
            }
        });

        jPanel1.setLayout(new java.awt.GridLayout(1, 0));

        printReceiptButton.setMnemonic('p');
        printReceiptButton.setText("Print Receipt");
        printReceiptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printReceiptButtonActionPerformed(evt);
            }
        });
        jPanel1.add(printReceiptButton);

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Grand Total");
        jPanel1.add(jLabel6);
        jPanel1.add(grandTotalField);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Discount %");
        jPanel1.add(jLabel7);

        discountFiel.setText("0");
        discountFiel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                discountFielKeyTyped(evt);
            }
        });
        jPanel1.add(discountFiel);

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Amount to be Paid");
        jPanel1.add(jLabel8);
        jPanel1.add(amountToBePaidField);

        jButton2.setText("Validate Sale");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Transaction Unique", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));

        jLabel1.setText("Transaction Id");

        transaction_idFied.setEditable(false);

        jLabel2.setText("Customer Name");

        jLabel4.setText("Cashier");

        cashier_nameField.setEditable(false);
        cashier_nameField.setText(" ");

        jLabel5.setText("Date");

        jButton3.setText("Get all data");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(transaction_idFied)
                    .addComponent(customer_nameField)
                    .addComponent(cashier_nameField)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jButton3)
                            .addComponent(dateChooserCombo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel4))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addGap(3, 3, 3)
                .addComponent(transaction_idFied, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(customer_nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(cashier_nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dateChooserCombo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(jButton3))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sales( Transaction) Detaills", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Product Name", "Product Code", "Selling Price", "Quantity Available", "Quantity to be sold", "Total Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setGridColor(new java.awt.Color(0, 0, 0));
        jTable1.setRowHeight(30);
        TableColumn productIdColumn = jTable1.getColumnModel().getColumn(0);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jTable1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTable1FocusLost(evt);
            }
        });
        jTable1.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                jTable1CaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        jTable1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTable1PropertyChange(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTable1KeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        TableColumn sportColumn = jTable1.getColumnModel().getColumn(0);

        sportColumn.setCellEditor(new DefaultCellEditor(prime));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1)
                .addGap(0, 0, 0))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1CaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jTable1CaretPositionChanged
        System.out.println("neba");
    }//GEN-LAST:event_jTable1CaretPositionChanged

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked

    }//GEN-LAST:event_jTable1MouseClicked

/*    public static void upDate(){
      
        System.out.println("update");
        try{
            int editingRow = jTable1.getEditingRow() ;
            int editingColumn = jTable1.getEditingColumn();
                
            myEditingRow = editingRow;
            //
                    jTable1.setValueAt(ProductsForSales.selectedItemCode, editingRow, 1);
                    jTable1.setValueAt(ProductsForSales.selectedItemPrice, editingRow, 2);
                    jTable1.setValueAt(ProductsForSales.selectedItemQuantity, editingRow, 3);
        }catch(ArrayIndexOutOfBoundsException e){
            
        }
        jTable1.updateUI();
    } */
    
    private void jTable1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTable1PropertyChange

        System.out.println("In the property changed event");
        String selectedProductName = "";
        try{
            int editingRow = jTable1.getEditingRow() ;
            int editingColumn = jTable1.getEditingColumn();
                
            myEditingRow = editingRow;
            
            //Get the product name that has been selected
            try{
            selectedProductName = jTable1.getValueAt(myEditingRow, 0).toString();
            }catch(NullPointerException e){
                
            }
            
            //Get the product whose name was selected
            ProductForSales selectedProduct = ProductsForSales.getProductByItsName(selectedProductName);
            
            //Now, fill jTable1 with the other properties of the selected product
            
            jTable1.setValueAt(selectedProduct.productCode, editingRow, 1);
            jTable1.setValueAt(selectedProduct.productSellingPrince, editingRow, 2);
            jTable1.setValueAt(selectedProduct.quantityInStock, editingRow, 3);
        }catch(ArrayIndexOutOfBoundsException e){
            
        }catch(NullPointerException e){
            
        }
    }//GEN-LAST:event_jTable1PropertyChange

    private void jTable1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyTyped

        //Gget the quantity of the product that has been bought, multiply it by the selling price
        //of the product, and put the total in the "Total" column
        
        //try{
        if(evt.getKeyChar() == '\n'){        
        System.out.println(myEditingRow);

            try{
        System.out.println(jTable1.getValueAt(myEditingRow, 4));
            }catch(ArrayIndexOutOfBoundsException e){
                JOptionPane.showMessageDialog(null, "ERROR: Small Error",
                "ERROR MESSAGE", JOptionPane.ERROR_MESSAGE);
            }

            
        int amountAvailable = Integer.parseInt(jTable1.getValueAt(myEditingRow, 3).toString());
        
        Integer s = new Integer((Integer)jTable1.getValueAt(myEditingRow, 4));
        int quantityOfProdutBought = s.intValue();
        
        //Flag an error if the quantity of goods to be sold is greater than the quantity available
        if(quantityOfProdutBought > amountAvailable){
            
            JOptionPane.showMessageDialog(null, "ERROR: The quantity you want to sell (" + quantityOfProdutBought
                    + ") is greater than the quantity you have (" + amountAvailable + ") !",
                "ERROR MESSAGE", JOptionPane.ERROR_MESSAGE);
            
            jTable1.setValueAt(0, myEditingRow, 4);
        }
        else{            
            
        int selectedItemPrice = Integer.parseInt(jTable1.getValueAt(myEditingRow, 2).toString());
        jTable1.setValueAt(selectedItemPrice * quantityOfProdutBought, myEditingRow, 5);
        
        }
        }        
        
        //Calcucate and dispalay the grand total
        caluculateAndDisplayGrandTotal();
    }//GEN-LAST:event_jTable1KeyTyped

    private int caluculateAndDisplayGrandTotal(){
        
        int sum = 0;
        for(int i=0; i < jTable1.getRowCount() && jTable1.getValueAt(i, 5) != null; i++){
               Integer s = new Integer(jTable1.getValueAt(i, 5).toString());
               sum += s.intValue();
               
               
        }
        //Display the sum to the grand total filed, and to the amount to be paid field
        grandTotalField.setText(new Integer(sum).toString());
        amountToBePaidField.setText(new Integer(sum).toString());
        
        return sum;
    }
    
    private int getNumberOfValidRows(){
        
        int i=0;
        for (; i < jTable1.getRowCount() && jTable1.getValueAt(i, 5) != null; i++) ;
        return i;
    }
    
    private String parseTable(int row){
        
        
        String returnString = null;
                Integer s1=0;
        try{
            s1 = new Integer((Integer)jTable1.getValueAt(myEditingRow, 3));
        }catch(ArrayIndexOutOfBoundsException e ){
            
        }
        
        int quantityOfProdutAvailaible = s1.intValue();
        Integer s=0;
        
        try{
         s = new Integer((Integer)jTable1.getValueAt(myEditingRow, 4));
        }catch(NullPointerException e){
        //Do Nothing
        }catch(ArrayIndexOutOfBoundsException e){
            
        }
        
        int quantityOfProdutBought = s.intValue();
        if(jTable1.getValueAt(row, 5) != null){
        
            String pruductName = jTable1.getValueAt(row, 0).toString();
            pruductCode = jTable1.getValueAt(row, 1).toString();            
            String pruductSellingPrice = jTable1.getValueAt(row, 2).toString();   
            
            int pruductQuantityBought = quantityOfProdutBought;
            int totalAmountEarnedFromItemSale = new Integer(jTable1.getValueAt(row, 5).toString()).intValue();
            
            returnString = "'"+pruductName +"',"
                            +"'"+pruductCode +"',"
                            + pruductSellingPrice + ","
                            + quantityOfProdutAvailaible +","
                            + pruductQuantityBought +","
                            + totalAmountEarnedFromItemSale + ")";
                            
        }
        
        return returnString;
    }
    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased
        
         
    }//GEN-LAST:event_jTable1KeyReleased

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //Validate button clicked
         
        int serial =0;
        
        if(customer_nameField.getText().isEmpty())            
             JOptionPane.showMessageDialog(null, "Customer Name Not Filled",
                "Error Message", JOptionPane.ERROR_MESSAGE); 
        else{
        
        
        boolean transactionGeneralSuccessful = false;
        boolean transactionDetailedSuccessful = false;
        boolean databaseUpdateSuccessfull = false;
        
        int numberOfTransactionDetailed = 0;
        int numberOfUpdatedDetails = 0;
        
        System.out.println("\naction performed");
        boolean allFieldsFilled = true;
        
       // SimpleDateFormat s = new SimpleDateFormat("yyyy-dd-xx");
        java.util.Formatter format = new java.util.Formatter();
        String date = format.format("%tF",dateChooserCombo1.getSelectedDate().getTime()).toString();
                    
           
           //Get data to insert into thte database
           int transactionId = new Integer(transaction_idFied.getText()).intValue();
           String customerName ="";
           String cashierName  = Users.getName();

           
           //Ensure valid date by getting and recalculating the total from the discount
           //caluculateAndDisplayGrandTotal();
           
           int discount = 0;
           int grandTo = Integer.parseInt(grandTotalField.getText());                 
           
           int grandToltal = Integer.parseInt(grandTotalField.getText());
           int discountt = Integer.parseInt(discountFiel.getText());
        
           int discountRemoved = (grandToltal/100)*discountt;        
           int amountPaid = grandToltal - discountRemoved;
           
           try{
           discount = Integer.parseInt(discountFiel.getText());
             }catch(NumberFormatException e) { 
           e.printStackTrace();
             
             }
           
           String transactionGeneralQuery = "";
           try{
           customerName = customer_nameField.getText();
           transactionGeneralQuery = "insert INTO KHAMALS.SALES_GENERAL VALUES("
                   +transactionId + ","
                   + "'" +cashierName +"'," 
                   + "'" + customerName +"'," 
                   + "'"+date+"',"
                   + grandTo +","
                   + discount +","
                   + amountPaid +")";
           
           transacetionGeneralDta.setQuery(transactionGeneralQuery);
           System.out.println("\nTransaction Genreal :" + transactionGeneralQuery);
               
           transactionGeneralSuccessful = true;
           }catch(NullPointerException e) {
               
           }catch(SQLException e){
               
           }
           
           
           //Count the number or rows containing valid data.
           for(int i=0; i < jTable1.getRowCount(); i++){
               
               int transId =  new Integer(transaction_idFied.getText().toString()).intValue();
               String tableDataAtRowI = parseTable(i);
               
               String query1 = "insert INTO KHAMALS.SALES_DETAILED VALUES(" 
                               + transId +"," + tableDataAtRowI;
           try{
               System.out.println(query1);
           transacetionGeneralDta.setQuery(query1);
           
           numberOfTransactionDetailed++;
             
           }catch(NullPointerException e){
               JOptionPane.showMessageDialog(null, "ERROR: Customer's Name has not been Fillef",
                "ERROR MESSAGE", JOptionPane.ERROR_MESSAGE);
              allFieldsFilled = false;
           }catch(SQLException e){
               
               break;
           }
           
           
           //Now, update products so that the quantity available reduces
           try{
        
               
        Integer s = new Integer((Integer)jTable1.getValueAt(myEditingRow, 4));
        int quantityOfProdutBought = s.intValue();
        
        Integer s2 = new Integer((Integer)jTable1.getValueAt(myEditingRow, 4));
        int quantityOfProdutInStock = s.intValue();
        
        String code = jTable1.getValueAt(serial, 1).toString();
        serial++;
        
        int quantityAvailable = Integer.parseInt(jTable1.getValueAt(myEditingRow, 3).toString());
        
        int quantityLeft = quantityAvailable - quantityOfProdutBought;
        
           //System.out.printf("%d %d",ProductsForSales.selectedItemQuantity , quantityOfProdutBought);
           String query2 = "UPDATE KHAMALS.PRODUCT set QUANTITY_AVAILABLE = "
                +  quantityLeft +" WHERE CODE='"+ code +"'";
           
           System.out.println("\n Update query" + query2);
           transacetionGeneralDta.setQuery(query2);
           
           numberOfUpdatedDetails++;
           }catch(SQLException e){
               e.printStackTrace();
           }
           
            if(tableDataAtRowI == null)break;
           }
           
           
         if(numberOfTransactionDetailed == getNumberOfValidRows())transactionDetailedSuccessful = true;
         if(numberOfUpdatedDetails == getNumberOfValidRows())databaseUpdateSuccessfull = true;
         
         
        //If all transactions porformed succ3esfully,
         if(transactionGeneralSuccessful && transactionGeneralSuccessful
                 && databaseUpdateSuccessfull && numberOfTransactionDetailed >0){
             
         //Print Resit
         printReceiptButton.doClick();
         
         //Display a message indicating success
          JOptionPane.showMessageDialog(null,"Transaction Performed Successfully.");
             
          //Clear customer name field   
             customer_nameField.setText("");
             
       //Update Product Name selection by first off all removing all items in comboboxs, then sending it to
       //be refilled
       JComboBox prime2 = new JComboBox();
       
       ProductsForSales.populateComboxWithProductNames(prime2);         
       jTable1.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(prime2));
       //Make jTable1 empty
             for (int i = 0; i < jTable1.getRowCount(); i++) {
                 for (int j = 0; j < jTable1.getColumnCount(); j++) {
                     jTable1.setValueAt(null, i, j);
                 }
                 
             }
             
             
        //Update Transaction id
        try{
        transacetionGeneralDta = new DatabaseHelper();
        transacetionGeneralDta.setQuery("Select MAX(TRANSACTION_ID) from SALES_GENERAL");
                
        //Set the current TRANSACTION_ID, which is the last TRANSACTION_ID + 1
        Integer id = transacetionGeneralDta.resultSet.getInt(1) + 1; 
        transaction_idFied.setText(id.toString()); 
         
        }catch(SQLException e){
            e.printStackTrace();
        }
        }
        }
           
    }//GEN-LAST:event_jButton2ActionPerformed

    private void discountFielKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_discountFielKeyTyped

        //Multiply  the grand total field by the discount and display the result in the 
        //AmountToBePaid field.
        if(evt.getKeyChar() =='\n'){
         
        int grandToltal = Integer.parseInt(grandTotalField.getText());
        int discount = Integer.parseInt(discountFiel.getText());
        
        int discountRemoved = (grandToltal/100)*discount;        
        int amountToBePaid = grandToltal - discountRemoved;
        
            System.out.printf("\ngTot: %d, disc %d, amo %d", grandToltal, discount, amountToBePaid);
        amountToBePaidField.setText(new Integer(amountToBePaid).toString());        
            
        }        
    }//GEN-LAST:event_discountFielKeyTyped

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        
          
        /*String query = "select * from KHAMALS.SALES_DETAILED";
        try{
        transacetionGeneralDta.setQuery(query);
                
        
        //Print all data in sales detailed
            for (int i = 0; i < transacetionGeneralDta.numberOfRows; i++) {
                
                System.out.println("" + transacetionGeneralDta.getValueAt(i, 0)
                        +"  :   " + transacetionGeneralDta.getValueAt(i, 1)
                        +"  :   " + transacetionGeneralDta.getValueAt(i, 2)
                        +"  :   " + transacetionGeneralDta.getValueAt(i, 3)
                        +"  :   " + transacetionGeneralDta.getValueAt(i, 4)
                        +"  :   " + transacetionGeneralDta.getValueAt(i, 5)
                        +"  :   " + transacetionGeneralDta.getValueAt(i, 6));
                
            }
        }catch(SQLException e){
            e.printStackTrace();
        } */
    }//GEN-LAST:event_jButton3ActionPerformed

    private void printReceiptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printReceiptButtonActionPerformed

        //Print receipt action
        
       String customerName = customer_nameField.getText().toString();
       if(customer_nameField.getText().isEmpty())            
             JOptionPane.showMessageDialog(null, "Customer Name Not Filled",
                "Error Message", JOptionPane.ERROR_MESSAGE);
       else{
       
      //Just print the  table
        try{
            
       
        //Add Customer Name
        jTable1.setValueAt("Bought by:", 10, 0);
        jTable1.setValueAt(customerName, 10, 1);
       
        //Add cashier Name
        jTable1.setValueAt("Sold by:", 11, 0);
        jTable1.setValueAt(cashier_nameField.getText().toString(), 11, 1);
        
        //Add Transaction Id
        jTable1.setValueAt("Transaction Id", 12, 0);
        jTable1.setValueAt(transaction_idFied.getText().toString(), 12, 1);
                                
        //Date
        jTable1.setValueAt("Date", 13, 0);
        jTable1.setValueAt("2014-07-08", 13, 1);
        
        
        //Add Grand Total
        jTable1.setValueAt("Grand Total", 11, 4);
        jTable1.setValueAt(grandTotalField.getText().toString(), 11, 5);
                
        
        //Add discount given
        jTable1.setValueAt("Discount", 12, 4);
        jTable1.setValueAt(discountFiel.getText().toString() + "%", 12, 5);
                
        
        //Add amount paid.
        jTable1.setValueAt("AMOUNT PAID ", 13, 4);
        jTable1.setValueAt(amountToBePaidField.getText().toString(), 13, 5);
                
        jTable1.print();
        }catch(PrinterException e){
            
             JOptionPane.showMessageDialog(null, "General Printer Error",
                "Error Message", JOptionPane.ERROR_MESSAGE);

        }
       }
    }//GEN-LAST:event_printReceiptButtonActionPerformed

    private void jTable1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTable1FocusLost
        
    }//GEN-LAST:event_jTable1FocusLost

    
    public static void reloadForm(){        
        //Creating this static method to reload this form.
        
        //1) Make the table empty
          for (int i = 0; i < jTable1.getRowCount(); i++) {
                 for (int j = 0; j < jTable1.getColumnCount(); j++) {
                     jTable1.setValueAt(null, i, j);
                 }
                 
             }
           
       //Reload data
       prime = new JComboBox();
        
        //Populate the combo box with product names
        ProductsForSales.populateComboxWithProductNames(prime);
        jTable1.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(prime));
        

    }
    private void formComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentHidden

        System.out.println("\n pop hidden");
        
        //Creating this static method to reload this form.
        
        //1) Make the table empty
          for (int i = 0; i < jTable1.getRowCount(); i++) {
                 for (int j = 0; j < jTable1.getColumnCount(); j++) {
                     jTable1.setValueAt(null, i, j);
                 }
                 
             }
           
       //Reload data
       prime = new JComboBox();
        
        //Populate the combo box with product names
        ProductsForSales.populateComboxWithProductNames(prime);
        jTable1.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(prime));
        this.updateUI();
        
        
        //prime = new JComboBox();                
        //ProductsForSales.populateComboxWithProductNames(prime);
        //this.updateUI();
    }//GEN-LAST:event_formComponentHidden

    private void formFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusLost
        
        System.out.println("\n Focus Lost");
        prime = new JComboBox();                
        ProductsForSales.populateComboxWithProductNames(prime);
        this.updateUI();
    }//GEN-LAST:event_formFocusLost

    Sales.ProductsForSales p = new Sales.ProductsForSales();
    public static int myEditingRow; //
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JTextField amountToBePaidField;
    private static javax.swing.JTextField cashier_nameField;
    private static javax.swing.JTextField customer_nameField;
    private datechooser.beans.DateChooserCombo dateChooserCombo1;
    private static javax.swing.JTextField discountFiel;
    private static javax.swing.JTextField grandTotalField;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTable1;
    private javax.swing.JButton printReceiptButton;
    private static javax.swing.JTextField transaction_idFied;
    // End of variables declaration//GEN-END:variables
}
