package Inventory;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Formatter;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import Database.DatabaseHelper;
//import org.jdesktop.swingx.prompt.PromptSupport;

/**
 *
 * @author Harvey
 */
public class DisplayInventory extends javax.swing.JFrame {

    /**
     * Creates new form DisplayInventory
     */
    private static final int ADDING = 1, MODIFYING = 2, FIRST = 1, SECOND = 2;
    DatabaseHelper helper;
    String query, selectedItem, selectedCategory;
    String misc;
    ArrayList<String> arrayList;
    ArrayList<Character> array;
    int action, addCount;
    String itemSelected;
    InventoryManager manager;
    private String prevName;
    private RadioItemListener listener;
    private JRadioButtonMenuItem item;
    private inputController inputController;

    public DisplayInventory() throws SQLException {
        initComponents();
        ImageIcon icon = new ImageIcon("add.png");
        addButton.setIcon(icon);
        icon = new ImageIcon("reduce.png");
        subtractButton.setIcon(icon);
        helper = new DatabaseHelper();
        array = new ArrayList<>();
        arrayList = new ArrayList<>();
        manager = new InventoryManager();
        inputController = new inputController();
        action = ADDING;
        addCount = FIRST;
        item = new JRadioButtonMenuItem("Edit");
        editPopupMenu.add(item);
        registerListeners();
    }

    public final void registerListeners() {
        //set selection modes
        categoriesList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        productList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        //register components to corresponding listeners
        categoriesList.addListSelectionListener(new CategoriesListListener());
        productList.addListSelectionListener(new ProductListListener());
        searchTextField.addKeyListener(new SearchListener());
        costPriceTextField.addKeyListener(inputController);
        minPriceTextField.addKeyListener(inputController);
        qtyTextField.addKeyListener(inputController);
        item.addActionListener(new RadioItemListener());

        ButtonListener blsnr = new ButtonListener();
        saveButton.addActionListener(blsnr);
        addButton.addActionListener(blsnr);
        subtractButton.addActionListener(blsnr);
        removeItemButton.addActionListener(blsnr);
    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        editPopupMenu = new javax.swing.JPopupMenu();
        inventoryPane = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        categoriesList = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        productList = new javax.swing.JList();
        searchTextField = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        qtySoldLabel = new javax.swing.JLabel();
        lastAddedLabel = new javax.swing.JLabel();
        lastSoldLabel = new javax.swing.JLabel();
        costPriceLabel = new javax.swing.JLabel();
        qtyAddedLabel = new javax.swing.JLabel();
        minPriceLabel = new javax.swing.JLabel();
        removeItemButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        subtractButton = new javax.swing.JButton();
        qtyInStockLabel = new javax.swing.JLabel();
        editButton = new javax.swing.JButton();
        addItemPanel = new javax.swing.JPanel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0));
        jPanel1 = new javax.swing.JPanel();
        qtyTextField = new javax.swing.JTextField();
        saveButton = new javax.swing.JButton();
        minPriceTextField = new javax.swing.JTextField();
        costPriceTextField = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        descriptionTextArea = new javax.swing.JTextArea();
        jLabel18 = new javax.swing.JLabel();
        categoryComboBox = new javax.swing.JComboBox();
        jLabel21 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        codeTextField = new javax.swing.JTextField();
        newCategoryLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(798, 439));

        inventoryPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                inventoryPaneMouseClicked(evt);
            }
        });

        jPanel3.setPreferredSize(new java.awt.Dimension(761, 360));

        categoriesList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Empty" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        categoriesList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                categoriesListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(categoriesList);

        productList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Empty" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        productList.setToolTipText("No Products are available");
        jScrollPane3.setViewportView(productList);

        searchTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextFieldActionPerformed(evt);
            }
        });

        jPanel6.setMaximumSize(new java.awt.Dimension(300, 363));
        jPanel6.setMinimumSize(new java.awt.Dimension(285, 348));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Product Name");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Production Cost");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Quantity in Stock");
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Minimum Price");
        jLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Last Date Sold");
        jLabel5.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Quantity Sold");
        jLabel6.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Quantity Added");
        jLabel7.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Last Date Added");
        jLabel8.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        nameLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        qtySoldLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        qtySoldLabel.setText("jLabel2");
        qtySoldLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        lastAddedLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        lastSoldLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        costPriceLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        qtyAddedLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        minPriceLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        removeItemButton.setText("Remove");

        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        subtractButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        subtractButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subtractButtonActionPerformed(evt);
            }
        });

        qtyInStockLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        qtyInStockLabel.setText("jLabel10");

        editButton.setText("Modify");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(costPriceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minPriceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(qtyInStockLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addButton)
                        .addGap(18, 18, 18)
                        .addComponent(subtractButton))
                    .addComponent(lastAddedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(qtyAddedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lastSoldLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(removeItemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(qtySoldLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel6Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel1, jLabel2, jLabel3, jLabel4, jLabel5, jLabel6, jLabel7, jLabel8});

        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(costPriceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minPriceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(qtyInStockLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(subtractButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lastAddedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(qtyAddedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(lastSoldLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(qtySoldLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(removeItemButton)
                    .addComponent(editButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel1, jLabel2, jLabel3, jLabel4, jLabel5, jLabel6, jLabel7, jLabel8});

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchTextField)))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 347, Short.MAX_VALUE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addGap(0, 0, 0))
        );

        inventoryPane.addTab("Inventory", jPanel3);

        jPanel1.setMaximumSize(new java.awt.Dimension(393, 394));

        saveButton.setText("Save");

        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel20.setText("Cost of Production");
        jLabel20.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel23.setText("Minimum Price");
        jLabel23.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel22.setText("Quantity");
        jLabel22.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        descriptionTextArea.setColumns(20);
        descriptionTextArea.setRows(5);
        jScrollPane1.setViewportView(descriptionTextArea);

        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel18.setText("Description");
        jLabel18.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        categoryComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None" }));
        categoryComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                categoryComboBoxItemStateChanged(evt);
            }
        });
        categoryComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryComboBoxActionPerformed(evt);
            }
        });

        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel21.setText("Category");
        jLabel21.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("        Product Code");
        jLabel9.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel17.setText("Product Name");
        jLabel17.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        nameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameTextFieldActionPerformed(evt);
            }
        });

        codeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                codeTextFieldActionPerformed(evt);
            }
        });

        newCategoryLabel.setBackground(new java.awt.Color(0, 0, 0));
        newCategoryLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newCategoryLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(codeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(costPriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(categoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(newCategoryLabel))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(minPriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(qtyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(115, 115, 115)
                                .addComponent(saveButton)))))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel17, jLabel18, jLabel20, jLabel21, jLabel22, jLabel23, jLabel9});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {costPriceTextField, minPriceTextField, qtyTextField});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {codeTextField, nameTextField});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(categoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(131, 131, 131)
                        .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(minPriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(7, 7, 7)
                                .addComponent(qtyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(saveButton))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(codeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newCategoryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(costPriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel17, jLabel18, jLabel20, jLabel21, jLabel22, jLabel23, jLabel9, newCategoryLabel});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {categoryComboBox, codeTextField, nameTextField});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {costPriceTextField, minPriceTextField, qtyTextField});

        javax.swing.GroupLayout addItemPanelLayout = new javax.swing.GroupLayout(addItemPanel);
        addItemPanel.setLayout(addItemPanelLayout);
        addItemPanelLayout.setHorizontalGroup(
            addItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addItemPanelLayout.createSequentialGroup()
                .addGap(160, 160, 160)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(196, Short.MAX_VALUE))
        );
        addItemPanelLayout.setVerticalGroup(
            addItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addItemPanelLayout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(addItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        inventoryPane.addTab("Add/Modify Product", addItemPanel);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(inventoryPane))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(inventoryPane)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchTextFieldActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        try {
            manager.addQuantity();
        } catch (SQLException e) {
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void subtractButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subtractButtonActionPerformed
        try {
            manager.reduceQuantity();
        } catch (SQLException e) {
        }
    }//GEN-LAST:event_subtractButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        try {
            query = "SELECT CODE, NAME, CATEGORY, DESCRIPTION, COST_PRICE, "
                    + "MIN_SELLING_PRICE, QUANTITY_AVAILABLE "
                    + "FROM PRODUCT WHERE NAME = '" + selectedItem + "'";
            helper.setQuery(query);

            nameTextField.setText(helper.resultSet.getString("NAME"));
            codeTextField.setText(helper.resultSet.getString("CODE"));
            String category = helper.resultSet.getString("CATEGORY");
            descriptionTextArea.setText(helper.resultSet.getString("DESCRIPTION"));
            costPriceTextField.setText(String.valueOf(helper.resultSet.getInt("COST_PRICE")));
            minPriceTextField.setText(String.valueOf(helper.resultSet.getInt("MIN_SELLING_PRICE")));
            qtyTextField.setText(String.valueOf(helper.resultSet.getInt("QUANTITY_AVAILABLE")));
            qtyTextField.setEditable(false);

            fillCombox();
            //using selectedCategory = helper.resultSet.getString("CATEGORY") directly,
            //before the above if statement, won't work because adding an item to
            //a combobox fires an itemstatechanged event which will modify 
            //the value of selectedCategory
            selectedCategory = category;
            categoryComboBox.setSelectedItem(category);
            System.out.println(category);
            inventoryPane.setSelectedComponent(addItemPanel);
            //get the previous name so that it cn be used to update the database
            prevName = nameTextField.getText();
            action = MODIFYING;
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_editButtonActionPerformed

    private void codeTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_codeTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_codeTextFieldActionPerformed

    private void nameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameTextFieldActionPerformed

    private void categoryComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_categoryComboBoxItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            selectedCategory = categoryComboBox.getSelectedItem().toString();
        }
    }//GEN-LAST:event_categoryComboBoxItemStateChanged

    private void newCategoryLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newCategoryLabelMouseClicked
        if (addCount == SECOND) {
            JOptionPane.showMessageDialog(addItemPanel, "You cannot create a second "
                    + "category now. You can only create one category for the product"
                    + "you are currently adding or modifying", "Forbidden Action",
                    JOptionPane.ERROR_MESSAGE);
        } else {
            String otherCategory = JOptionPane.showInputDialog(addItemPanel,
                    "Add a new category of Products");
            if (otherCategory != null) {
                int i;
                for (i = 0; i < categoryComboBox.getItemCount(); i++) {
                    if (otherCategory.equalsIgnoreCase(categoryComboBox.getItemAt(i).toString())) {
                        JOptionPane.showMessageDialog(addItemPanel, otherCategory
                                + "is already being used. Try another name.");
                        break;
                    }
                }
                if (i >= categoryComboBox.getItemCount()) {
                    otherCategory = toSentenceCase(otherCategory);
                    categoryComboBox.addItem(otherCategory);
                    categoryComboBox.setSelectedItem(otherCategory);
                    selectedCategory = otherCategory;
                    addCount = SECOND;
                }
            }
        }
    }//GEN-LAST:event_newCategoryLabelMouseClicked

    private void inventoryPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inventoryPaneMouseClicked
        try {
            fillCombox();
        } catch (SQLException e) {
        }
    }//GEN-LAST:event_inventoryPaneMouseClicked

    private void categoryComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_categoryComboBoxActionPerformed

    private void categoriesListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_categoriesListMouseClicked
        if (evt.isMetaDown()) {
            editPopupMenu.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_categoriesListMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.
                    getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException | InstantiationException |
                IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
          }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {// equivalence: java.awt.EventQueue.invokeLater(new Runnable()
            try {
                new DisplayInventory().setVisible(true);

            } catch (SQLException ex) {
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JPanel addItemPanel;
    private javax.swing.JList categoriesList;
    private javax.swing.JComboBox categoryComboBox;
    private javax.swing.JTextField codeTextField;
    private javax.swing.JLabel costPriceLabel;
    private javax.swing.JTextField costPriceTextField;
    private javax.swing.JTextArea descriptionTextArea;
    private javax.swing.JButton editButton;
    private javax.swing.JPopupMenu editPopupMenu;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.JTabbedPane inventoryPane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lastAddedLabel;
    private javax.swing.JLabel lastSoldLabel;
    private javax.swing.JLabel minPriceLabel;
    private javax.swing.JTextField minPriceTextField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JLabel newCategoryLabel;
    private javax.swing.JList productList;
    private javax.swing.JLabel qtyAddedLabel;
    private javax.swing.JLabel qtyInStockLabel;
    private javax.swing.JLabel qtySoldLabel;
    private javax.swing.JTextField qtyTextField;
    private javax.swing.JButton removeItemButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JButton subtractButton;
    // End of variables declaration//GEN-END:variables

    public class CategoriesListListener implements ListSelectionListener {

        @Override
        public void valueChanged(ListSelectionEvent lse) {
            try {
                selectedCategory = (String) categoriesList.getSelectedValue();
                manager.category = selectedCategory;
                selectedItem = manager.getProducts();
                manager.product = selectedItem;
                manager.getProductDetails();
            } catch (IllegalStateException | SQLException ex) {
            }
        }
    }

    public class ProductListListener implements ListSelectionListener {

        @Override
        public void valueChanged(ListSelectionEvent lse) {
            try {
                //if the listener was triggered due to a change in the categories list
                //selectedItem wil be null
                if (productList.getSelectedValue() != null) {//Not triggered by categories list
                    selectedItem = (String) productList.getSelectedValue();//get the selected item
                    System.out.println(selectedItem);
                } else {//SelectedItem is null, so get the first tiem in the database
                    query = "SELECT NAME FROM PRODUCT WHERE CATEGORY = '" + selectedCategory + "'";
                    helper.setQuery(query);
                    helper.resultSet.first();
                    selectedItem = helper.resultSet.getString("NAME");
                }
                manager.category = selectedCategory;
                manager.product = selectedItem;
                manager.getProductDetails();
            } catch (IllegalStateException | SQLException ex) {
            }
        }

    }

    public class ButtonListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent ae) {
            JButton button = (JButton) ae.getSource();
            try {
                if (button.equals(removeItemButton)) {
                    removeProduct();
                } else if (button.equals(saveButton)) {
                    addModifyProduct();
                }
            } catch (SQLException ex) {
            }

        }

        public void addModifyProduct() throws SQLException {
            int cost = 0, minPrice = 0;
            String name, code;
            try {
                name = nameTextField.getText();
                name = toSentenceCase(name);
                code = codeTextField.getText();
                code = toSentenceCase(code);
                String desc = descriptionTextArea.getText();
                String category = selectedCategory; //categoryTextField.getText();
                System.out.println(selectedCategory);
                
                        /*= toSentenceCase(category)*/
                        
                Integer.parseInt(costPriceTextField.getText());
                minPrice = Integer.parseInt(minPriceTextField.getText());

                if (action == ADDING) {
                    int quantity = Integer.parseInt(qtyTextField.getText());
                    Calendar calendar = Calendar.getInstance();
                    Timestamp timestamp = new Timestamp(calendar.getTimeInMillis());
//                Date date = new Date(calendar.getTimeInMillis());
                    Formatter orm = new Formatter();
                    String date = orm.format("%tF", timestamp).toString();
                    query = "INSERT INTO PRODUCT (CODE, NAME, CATEGORY, DESCRIPTION,"
                            + "QUANTITY_AVAILABLE, COST_PRICE, MIN_SELLING_PRICE, "
                            + "LASTLY_ADDED_ON, QUANTITY_ADDED) VALUES("
                            + "'" + code + "', "
                            + "'" + name + "', "
                            + "'" + category + "', "
                            + "'" + desc + "', "
                            + quantity + ", "
                            + cost + ", "
                            + minPrice + ", "
                            + "'" + date + "', "
                            + quantity + ")";
                } else {

                    query = "UPDATE PRODUCT SET CODE = '" + code + "', "
                            + "NAME = '" + name + "', "
                            + "CATEGORY = '" + category + "', "
                            + "DESCRIPTION = '" + desc + "', "
                            + "COST_PRICE = " + cost + ", "
                            + "MIN_SELLING_PRICE = " + minPrice
                            + " WHERE NAME = '" + (prevName.equals(name)
                            ? name : prevName) + "'";
                    //System.out.println(query);
                }
            } catch (NumberFormatException | StringIndexOutOfBoundsException e) {
                JOptionPane.showMessageDialog(addItemPanel, "Please fill all required fields. "
                        + "Description is optional though.");
                return;
            }

            try {
                helper.setQuery(query);
                if (action == ADDING) {
                    JOptionPane.showMessageDialog(rootPane, name + " was added to the "
                            + "list of products.", "Product Added",
                            JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(rootPane, "The product was modified "
                            + "successfully.", "Product Modified",
                            JOptionPane.INFORMATION_MESSAGE);
                    action = ADDING;
                }
                System.out.println(action);
                manager.getAll();
            } catch (SQLException e) {
                //if this catch doesnot create a duplicate entery error (primary key voilation)
                //then the error is something else

                switch (action) {
                    case ADDING:
                        query = "SELECT CODE FROM PRODUCT";
                        helper.setQuery(query);
//                      if not adding the first product...; This may seems redundant at first
                        if (helper.resultSet.first()) {
                            do {
                                if (code.equals(helper.resultSet.getString("CODE"))) {
                                    JOptionPane.showMessageDialog(rootPane, "Product code "
                                            + code + " already used for another product. Try "
                                            + "entering a different code", "Duplicate name",
                                            JOptionPane.INFORMATION_MESSAGE);
                                    break;//do while break
                                }
                            } while (helper.resultSet.next());
                            break;//case break
                        }
                    default:
                        query = "SELECT CODE FROM PRODUCT WHERE CODE <> '" + code + "'";
                        helper.setQuery(query);

                        if (helper.resultSet.first()) {
                            do {
                                if (code.equals(helper.resultSet.getString("CODE"))) {
                                    JOptionPane.showMessageDialog(rootPane, "Product code "
                                            + code + " already used for another product. Try "
                                            + "entering a different code", "Duplicate name",
                                            JOptionPane.INFORMATION_MESSAGE);
                                    break;//do while break
                                }
                            } while (helper.resultSet.next());
                        }
                }
                e.printStackTrace();
            }
        }

        private void removeProduct() throws SQLException {
            query = "DELETE FROM PRODUCT WHERE NAME = '" + selectedItem + "'";
            helper.setQuery(query);
            manager.category = selectedCategory;
            selectedItem = manager.getProducts();
            manager.product = selectedItem;
            manager.getAll();
        }
    }

    public class SearchListener implements KeyListener {

        @Override
        public void keyTyped(KeyEvent e) {
            if (e.getKeyChar() == '\b') {
                if (array.size() > 0) {
                    array.remove(array.size() - 1);
                }
            } else {
                array.add(e.getKeyChar());
            }

            if (array.size() > 0) {
                try {
                    misc = array.get(0).toString();
                    for (int i = 1; i < array.size(); i++) {
                        misc = misc.concat(array.get(i).toString());
                    }

                    misc = toSentenceCase(misc);
                    System.out.println(misc);
                    query = "SELECT * FROM PRODUCT WHERE NAME LIKE '%" + misc
                            + "%' OR CATEGORY LIKE '%" + misc + "%'";
                    helper.setQuery(query);
                    //System.out.println(query);

                    if (helper.resultSet.first()) {
                        //System.out.println(helper.resultSet.getString("CATEGORY"));

                        //set these values for a call to getProductdetails below
                        manager.category = helper.resultSet.getString("CATEGORY");
                        manager.product = misc = helper.resultSet.getString("NAME");
                        System.out.println(misc);
                        //as usual set this in case an addition or subtraction is made
                        //System.out.println(helper.resultSet.isClosed());
                        //selectedItem = manager.getProducts(helper.resultSet);
                        productList.clearSelection();
                        arrayList.clear();
                        do {
                            arrayList.add(helper.resultSet.getString("NAME"));
                            System.out.println(helper.resultSet.getString("NAME"));
                        } while (helper.resultSet.next());
                        productList.setListData(arrayList.toArray());
                        manager.getProductDetails();
                    }
                } catch (SQLException | IllegalStateException ex) {
                  }
            }

        }

        @Override
        public void keyPressed(KeyEvent e) {
        }

        @Override
        public void keyReleased(KeyEvent e
        ) {
        }
    }

    private class InventoryManager {

        private String category;
        private String product;

        public InventoryManager() throws IllegalStateException, SQLException {
            getAll();
        }

        public final void getAll() throws IllegalStateException, SQLException {
            query = "SELECT DISTINCT CATEGORY FROM PRODUCT";
            helper.setQuery(query);
            if (helper.resultSet.first()) {
                System.out.println(true);
                String cat = helper.resultSet.getString("CATEGORY");//Get the products of the 
                // categoriesList.clearSelection();
                System.out.println("getALL " + category);
                arrayList.clear();
                do {
                    arrayList.add(helper.resultSet.getString("CATEGORY"));
                } while (helper.resultSet.next());
                //All global variables are set to null after this call, so I use a local varaible
                //cat tostore the first category above
                categoriesList.setListData(arrayList.toArray());
                category = selectedCategory = cat;
                //set the selected item to ensure that the user can make add or reduce the quantity
                //of without having to click on the item itself since the first item is shown by default
                product = selectedItem = getProducts();//first category
                System.out.println(product);
                getProductDetails();//get the details of the first product
            }
        }

        public String getProducts() throws IllegalStateException, SQLException {
            System.out.println("getProducts" + category);
            query = "SELECT * FROM PRODUCT WHERE CATEGORY = '" + category + "'";
            helper.setQuery(query);
            System.out.println(query);
            if (helper.resultSet.first()) {
                System.out.println("true2");
                // productList.clearSelection();
                String prod;
                prod = helper.resultSet.getString("NAME");
                System.out.println(prod);
                arrayList.clear();
                do {
                    arrayList.add(helper.resultSet.getString("NAME"));
                } while (helper.resultSet.next());
                productList.setListData(arrayList.toArray());

                return prod;
            }
            return null;
        }

        public void getProductDetails() throws IllegalStateException, SQLException {

            query = "SELECT * FROM PRODUCT WHERE NAME = '" + product + "'";
            //System.out.println(query);
            helper.setQuery(query);
            System.out.println(query);
            if (helper.resultSet.first()) {
                //set the different values for the selected product
                nameLabel.setText(helper.resultSet.getString("NAME"));
                costPriceLabel.setText(helper.resultSet.getString("COST_PRICE"));//int will be converted to string
                minPriceLabel.setText(helper.resultSet.getString("MIN_SELLING_PRICE"));//automatically says javadoc
                qtyInStockLabel.setText(helper.resultSet.getString("QUANTITY_AVAILABLE"));
                qtyAddedLabel.setText(helper.resultSet.getString("QUANTITY_ADDED"));

                //GET THE DATES on which the produt was added and sold
                query = "SELECT date(LASTLY_ADDED_ON) AS LASTLY_ADDED_ON, "
                        + "date(LASTLY_SOLD_ON) AS LASTLY_SOLD_ON "
                        + "FROM PRODUCT WHERE NAME = '" + product + "'";
                helper.setQuery(query);
                helper.resultSet.first();
                lastAddedLabel.setText(helper.resultSet.getString("LASTLY_ADDED_ON"));

                if (helper.resultSet.getString("LASTLY_SOLD_ON") != null) {//never == null a string

                    lastSoldLabel.setText(helper.resultSet.getString("LASTLY_SOLD_ON"));
                    qtySoldLabel.setText(helper.resultSet.getString("LAST_QUANTITY_SOLD"));
                } else {
                    lastSoldLabel.setText("Not yet sold");
                    qtySoldLabel.setText("None");
                }
            }
        }

        public void getProductDetails(ResultSet resultSet) throws SQLException {
            nameLabel.setText(helper.resultSet.getString("NAME"));
            costPriceLabel.setText(resultSet.getString("COST_PRICE"));//int will be converted to string
            minPriceLabel.setText(resultSet.getString("MIN_SELLING_PRICE"));

            Date date = new Time(Long.parseLong(resultSet.getString("LASTLY_ADDED_ON")));
            lastAddedLabel.setText(date.toString());//Get a string representation of the date
            qtyAddedLabel.setText(resultSet.getString("QUANTITY_ADDED"));

            date = new Time(Long.parseLong(resultSet.getString("LASTLY_SOLD_ON")));
            lastSoldLabel.setText(date.toString());
            qtySoldLabel.setText(resultSet.getString("LAST_QUANTITY_SOLD"));
        }

        public void addQuantity() throws SQLException {
            try {
                int qty = Integer.parseInt(JOptionPane.showInputDialog("Enter quantity"));
                Calendar cal = Calendar.getInstance();
                Formatter nn = new Formatter();
                String da = nn.format("%tF", cal.getTime()).toString();

                //Previous quantity + new quantity; update the new time and quantity
                query = "UPDATE PRODUCT SET QUANTITY_AVAILABLE = "
                        + "(SELECT QUANTITY_AVAILABLE FROM PRODUCT WHERE NAME = '"
                        + selectedItem + "') + " + qty + ", LASTLY_ADDED_ON = '" + da
                        + "', QUANTITY_ADDED = " + qty + "WHERE NAME = '"
                        + selectedItem + "'";
                helper.setQuery(query);
                manager.getProductDetails();
            } catch (NumberFormatException e) {

            }
        }

        public void reduceQuantity() throws SQLException {
            try {
                int qty = Integer.parseInt(JOptionPane.showInputDialog("Enter quantity"));
                query = "UPDATE PRODUCT SET QUANTITY_AVAILABLE = "
                        + "(SELECT QUANTITY_AVAILABLE FROM PRODUCT WHERE NAME = '"
                        + selectedItem + "') - " + qty + "WHERE NAME = '"
                        + selectedItem + "'";
                helper.setQuery(query);
                manager.getProductDetails();
            } catch (NumberFormatException e) {

            }
        }
    }

    public static String toSentenceCase(String string) {
        //return a string that starts with an uppercase letter: sentence case that is.
        String[] temp;
        temp = string.split("[ ]");
        String retrn = "";
        for (String next : temp) {
            retrn = retrn.concat(next.substring(0, 1).toUpperCase().
                    concat(next.substring(1))).concat(" ");
        }
        retrn = retrn.trim();
        return retrn;
    }

    private class inputController implements KeyListener {

        @Override
        public void keyTyped(KeyEvent evt) {
            int k = evt.getKeyCode();
            char c = evt.getKeyChar();
            if (!((c >= '0') && (c <= '9')
                    || (c == KeyEvent.VK_ENTER || c == KeyEvent.VK_BACK_SPACE))) {
                JOptionPane.showMessageDialog(null, "You must enter only numbers here");
                evt.consume();
            }
        }

        @Override
        public void keyPressed(KeyEvent e) {
        }

        @Override
        public void keyReleased(KeyEvent e) {

        }
    }

    private void fillCombox() throws SQLException {
        //get the different categories
        query = "SELECT DISTINCT CATEGORY FROM PRODUCT";
        helper.setQuery(query);
        if (helper.resultSet.first()) {
            categoryComboBox.removeAllItems();
            do {
                categoryComboBox.addItem(helper.resultSet.getString("CATEGORY"));
            } while (helper.resultSet.next());

        }
    }

    private class RadioItemListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                String newName = JOptionPane.showInputDialog(inventoryPane, "Enter a new"
                        + " category name for " + selectedCategory + "'");
                query = "UPDATE PRODUCT SET CATEGORY = '" + newName
                        + "' WHERE CATEGORY = '" + selectedCategory + "'";
                helper.setQuery(query);
                manager.getAll();
            } catch (SQLException | IllegalStateException ex) {
                }
        }

    }
}

///do this after
//create a table of categories and add a combo box to the add item tab
//to prevent theuser from making typos when entering the category
