/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package ordersAndMeasurements;

import java.awt.Color;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import Database.DatabaseHelper;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JRootPane;
import javax.swing.table.TableModel;

/**
 *
 * @author Klexy
 */
public class ViewOrderHistory extends javax.swing.JFrame {
    String defualtQuery = "select customers.first_name, customers.last_name, product.name, orders.number_of_units"
                + ", orders.date_placed, orders.date_due, orders.total_cost, orders.order_number from customers, product, orders where"
                + "(orders.customer_id = customers.id and product.code = orders.product_code)"
                + " order by orders.order_number";
    DatabaseHelper db;
    /**
     * Creates new form ViewOrderHistory
     */
    public ViewOrderHistory() throws SQLException {
        //cancelOrder.setRequestFocusEnabled(false);
        db = new DatabaseHelper();
        db.setQuery(defualtQuery);
        
        setTitle("View Order History");
        getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        initComponents();
        restrictDatePickers();
        //centralize window
        this.setLocationRelativeTo(null);
        
        try {
            loadTableComponents();
        } catch (SQLException ex) {
            Logger.getLogger(ViewOrderHistory.class.getName()).log(Level.SEVERE, null, ex);
        }
        setImageIcons();
    }
    
    public void restrictDatePickers(){
        Calendar cal;
        cal = Calendar.getInstance();
        this.dateFromFilterDatePiker.setDate(cal.getTime());
        this.dateToFilterDatePicker.setDate(cal.getTime());
    }
    
    public void setImageIcons(){
       ImageIcon searchIco = new ImageIcon("images/search1.png");    
       this.searchBtn.setIcon(searchIco);
       ImageIcon refreshIco = new ImageIcon("images/refresh.png");
       this.refreshBtn.setIcon(refreshIco);
       ImageIcon deleteIco = new ImageIcon("images/delete.png");
       this.cancelOrder.setIcon(deleteIco);
       ImageIcon cancelIco = new ImageIcon("images/delete_red.png");
       this.closeBtn.setIcon(cancelIco);
    }
    
    public void loadTableComponents() throws SQLException{
                
        String tempName = "";        
        
        //First clear all the table entries
        for (int i = 0; i < 100; i++) {
            for (int j = 0; j < 7; j++) {
                this.ordersTable.setValueAt("", i, j);
            }
        }
        db.resultSet.absolute(0);
        while(db.resultSet.next()){
            
        for(int i=0; i<db.getRowCount(); i++){
            //fill for j==0 for the JTable            
            tempName =  db.getValueAt(i, 0).toString();
            tempName += " " + db.getValueAt(i, 1).toString();            
            ordersTable.setValueAt(tempName, i, 0);
            //fill for j==1 fo the JTable
            ordersTable.setValueAt(db.getValueAt(i, 2).toString(), i, 1);
            //fill for j==2 for the JTable
            ordersTable.setValueAt(db.getValueAt(i, 3).toString(), i, 2);
            //fill for j==3 for the JTable
            ordersTable.setValueAt(db.getValueAt(i, 4).toString(), i, 3);
            //fill for j==4 for the JTable
            ordersTable.setValueAt(db.getValueAt(i, 5).toString(), i, 4);
            //fill for j==5 for the JTable
            ordersTable.setValueAt(db.getValueAt(i, 6).toString(), i, 5);
            //fill for j==6 for the JTable
            ordersTable.setValueAt(db.getValueAt(i, 7).toString(), i, 6);
            //db.resultSet.absolute(0);
          }            
        }
        this.ordersTable.repaint();
        //db.disconnectFromDatabase();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane1 = new javax.swing.JDesktopPane();
        customerNameSearchTextFld = new javax.swing.JTextField();
        searchBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ordersTable = new javax.swing.JTable();
        closeBtn = new javax.swing.JButton();
        cancelOrder = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        dateFromFilterDatePiker = new org.jdesktop.swingx.JXDatePicker();
        jLabel2 = new javax.swing.JLabel();
        dateToFilterDatePicker = new org.jdesktop.swingx.JXDatePicker();
        refreshBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jDesktopPane1.setBackground(new java.awt.Color(204, 204, 204));

        customerNameSearchTextFld.setForeground(new java.awt.Color(153, 153, 153));
        customerNameSearchTextFld.setText("type customer name here");
        customerNameSearchTextFld.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                customerNameSearchTextFldMouseClicked(evt);
            }
        });
        customerNameSearchTextFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerNameSearchTextFldActionPerformed(evt);
            }
        });
        customerNameSearchTextFld.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                customerNameSearchTextFldKeyTyped(evt);
            }
        });

        searchBtn.setFont(new java.awt.Font("Vani", 1, 12)); // NOI18N
        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        ordersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Customer Name", "Product Name", "Amount", "Order Date", "Delivery Date", "Price", "Order ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(ordersTable);
        if (ordersTable.getColumnModel().getColumnCount() > 0) {
            ordersTable.getColumnModel().getColumn(2).setPreferredWidth(15);
            ordersTable.getColumnModel().getColumn(6).setPreferredWidth(20);
        }

        closeBtn.setFont(new java.awt.Font("Vani", 1, 12)); // NOI18N
        closeBtn.setText("Close");
        closeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeBtnActionPerformed(evt);
            }
        });

        cancelOrder.setFont(new java.awt.Font("Vani", 1, 12)); // NOI18N
        cancelOrder.setText("Delete Order");
        cancelOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelOrderActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Vani", 3, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Get orders as from:");

        dateFromFilterDatePiker.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dateFromFilterDatePikerPropertyChange(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Vani", 3, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("To:");

        refreshBtn.setFont(new java.awt.Font("Vani", 3, 12)); // NOI18N
        refreshBtn.setText("Refresh");
        refreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDesktopPane1Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(cancelOrder)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(closeBtn)
                        .addGap(84, 84, 84))
                    .addGroup(jDesktopPane1Layout.createSequentialGroup()
                        .addComponent(refreshBtn)
                        .addGap(74, 74, 74)
                        .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                                .addComponent(dateFromFilterDatePiker, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(searchBtn))
                            .addComponent(dateToFilterDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                        .addComponent(customerNameSearchTextFld, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jDesktopPane1Layout.createSequentialGroup()
                        .addComponent(customerNameSearchTextFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(refreshBtn))
                    .addGroup(jDesktopPane1Layout.createSequentialGroup()
                        .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(dateFromFilterDatePiker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(dateToFilterDatePicker, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelOrder)
                    .addComponent(closeBtn))
                .addContainerGap(41, Short.MAX_VALUE))
        );
        jDesktopPane1.setLayer(customerNameSearchTextFld, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(searchBtn, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(closeBtn, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(cancelOrder, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(dateFromFilterDatePiker, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(dateToFilterDatePicker, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(refreshBtn, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jDesktopPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jDesktopPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBtnActionPerformed
        this.dispose();
    }//GEN-LAST:event_closeBtnActionPerformed

    private void cancelOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelOrderActionPerformed
        //Method of deleting record: get selected table index, colpy the id and use it remove it from 
        //the database. after this is done, then reload the database.
        
        //First off, store the last query that was used to filter the information
        String tempQuery = defualtQuery;
        int selectedTableIndex = this.ordersTable.getSelectedRow();
        String orderID = this.ordersTable.getValueAt(selectedTableIndex, 6).toString();
        //warn the user of the deletion
        int delete = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete the selected order?");
        
        if(delete == 0){
            this.defualtQuery = "delete from orders where order_number = " + orderID;                  
            try{
                db.setQuery(this.defualtQuery);
                
                //When the deletion is complete, reload the table with the old query
                this.defualtQuery = tempQuery;
                db.setQuery(this.defualtQuery);
                loadTableComponents();  
            }catch (SQLException ex) {
            Logger.getLogger(ViewOrderHistory.class.getName()).log(Level.SEVERE, null, ex);
            } 
        }
        else{
            JOptionPane.showMessageDialog(null, "Delete order request canceled!"
                , "Operation Canceled", JOptionPane.PLAIN_MESSAGE);
        }
       
    }//GEN-LAST:event_cancelOrderActionPerformed

    private void dateFromFilterDatePikerPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dateFromFilterDatePikerPropertyChange
               
    }//GEN-LAST:event_dateFromFilterDatePikerPropertyChange

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        
        
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
        String dateFrom = formatter.format(this.dateFromFilterDatePiker.getDate());
        String dateTo = formatter.format(this.dateToFilterDatePicker.getDate());
        this.defualtQuery = "select customers.first_name, customers.last_name, product.name, orders.number_of_units"
                + ", orders.date_placed, orders.date_due, orders.total_cost, orders.order_number from customers, product, orders where"
                + "(orders.customer_id = customers.id and product.code = orders.product_code and "
                + "orders.date_placed >= CAST('" + dateFrom + "' as DATE)"
                + " and orders.date_placed <= CAST('" + dateTo +"' as DATE))"
                + " order by orders.order_number";
        try {
            db.setQuery(this.defualtQuery);
            loadTableComponents();            
        } catch (SQLException ex) {
            Logger.getLogger(ViewOrderHistory.class.getName()).log(Level.SEVERE, null, ex);
        }      
        this.ordersTable.repaint();
    }//GEN-LAST:event_searchBtnActionPerformed

    private void customerNameSearchTextFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerNameSearchTextFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_customerNameSearchTextFldActionPerformed

    private void customerNameSearchTextFldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_customerNameSearchTextFldKeyTyped
        String name = this.customerNameSearchTextFld.getText().toString();
        String tempQuery = this.defualtQuery;
        //Check if the input field is empty
        if(!name.equalsIgnoreCase("")){
            //this is a very lazy approach to converting the first letter of the string to 
        //an upper case so that it matches what we have in the database as the name formats
        //it involves two dummy strings, one to hold the first letter and the other to hold the rest
        String firstLetter;
        char []temp = name.toCharArray();
        firstLetter = String.copyValueOf(temp, 0, 1);
        firstLetter = firstLetter.toUpperCase();
        String restOf = String.copyValueOf(temp, 1, temp.length-1);
        String modifiedName = firstLetter + restOf;
            System.out.println("Modified string" + modifiedName);
        //now continue with the query
        
        this.defualtQuery = "select customers.first_name, customers.last_name, product.name, orders.number_of_units"
                + ", orders.date_placed, orders.date_due, orders.total_cost, orders.order_number from customers, product, orders where"
                + "(orders.customer_id = customers.id and product.code = orders.product_code and "
                + "(customers.first_name like '%" + modifiedName + "%' or customers.last_name like '%" + modifiedName +"%'))";
        try{
        db.setQuery(this.defualtQuery);
        this.loadTableComponents();
        } catch (SQLException ex) {
            Logger.getLogger(ViewOrderHistory.class.getName()).log(Level.SEVERE, null, ex);
        }  
        }else{
            try{
            this.defualtQuery = tempQuery;
            db.setQuery(tempQuery);
            this.loadTableComponents();
            } catch (SQLException ex) {
            Logger.getLogger(ViewOrderHistory.class.getName()).log(Level.SEVERE, null, ex);
            } 
        }
        if(name.equalsIgnoreCase("")){
            this.defualtQuery = "select customers.first_name, customers.last_name, product.name, orders.number_of_units"
                + ", orders.date_placed, orders.date_due, orders.total_cost, orders.order_number from customers, product, orders where"
                + "(orders.customer_id = customers.id and product.code = orders.product_code)"
                + " order by orders.order_number";
        try{
            db.setQuery(defualtQuery);
            this.loadTableComponents();
        } catch (SQLException ex) {
            Logger.getLogger(ViewOrderHistory.class.getName()).log(Level.SEVERE, null, ex);
        } 
        }
        
    }//GEN-LAST:event_customerNameSearchTextFldKeyTyped

    private void refreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtnActionPerformed
        this.defualtQuery = "select customers.first_name, customers.last_name, product.name, orders.number_of_units"
                + ", orders.date_placed, orders.date_due, orders.total_cost, orders.order_number from customers, product, orders where"
                + "(orders.customer_id = customers.id and product.code = orders.product_code)"
                + " order by orders.order_number";
        try{
            db.setQuery(defualtQuery);
            this.loadTableComponents();
        } catch (SQLException ex) {
            Logger.getLogger(ViewOrderHistory.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }//GEN-LAST:event_refreshBtnActionPerformed

    private void customerNameSearchTextFldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customerNameSearchTextFldMouseClicked
        this.customerNameSearchTextFld.setText("");
        this.customerNameSearchTextFld.setForeground(Color.black);
    }//GEN-LAST:event_customerNameSearchTextFldMouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        this.toFront();
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewOrderHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewOrderHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewOrderHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewOrderHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {                
                try {
                    new ViewOrderHistory().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(ViewOrderHistory.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelOrder;
    private javax.swing.JButton closeBtn;
    private javax.swing.JTextField customerNameSearchTextFld;
    private org.jdesktop.swingx.JXDatePicker dateFromFilterDatePiker;
    private org.jdesktop.swingx.JXDatePicker dateToFilterDatePicker;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable ordersTable;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JButton searchBtn;
    // End of variables declaration//GEN-END:variables
}
